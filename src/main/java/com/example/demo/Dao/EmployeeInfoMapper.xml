<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.Dao.EmployeeInfoMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.Enity.EmployeeInfo">
    <id column="eid" jdbcType="INTEGER" property="eid" />
    <result column="ename" jdbcType="VARCHAR" property="ename" />
    <result column="eage" jdbcType="INTEGER" property="eage" />
    <result column="did" jdbcType="INTEGER" property="did" />
  </resultMap>
  <!-- 自定义的返回值封装类型 -->
  <resultMap id="SelectWithDept" type="com.example.demo.Enity.EmployeeInfo">
    <id column="eid" jdbcType="INTEGER" property="eid" />
    <result column="ename" jdbcType="VARCHAR" property="ename" />
    <result column="eage" jdbcType="INTEGER" property="eage" />
    <!-- 可以将下列项删掉，则在查询数据库时，不会将 对应的属性封装进来 -->
     <result column="did" jdbcType="INTEGER" property="did" /> 
    <!-- 此处为关联联合查询，联合dptinfo对象，让其显示部门名：dptname -->
    <association property="departmentInfo" javaType="com.example.demo.Enity.DepartmentInfo" >
   <id column="dpid" property="dpid"></id> 
    <result column="dpname" property="dpname" />
    </association>
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    eid, ename, eage, did
  </sql>
  <select id="selectByExample" parameterType="com.example.demo.Enity.EmployeeInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from employee_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
   <!-- 自定义查询带部门 -->
   <sql id="withDpt_Column_List">
    eid, ename, eage, did,dpid,dpname
  </sql>
   <!-- 自定义查询带部门 -->
    <select id="selectWithDptByExample" parameterType="com.example.demo.Enity.EmployeeInfoExample" resultMap="SelectWithDept">
     select
    <if test="distinct">
      distinct
    </if>
    <include refid="withDpt_Column_List" />
    FROM employee_info
    LEFT JOIN dapartment_info ON did=dpid
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  <if test="orderByClause != null">
       order by ${orderByClause}
    </if>  
    </select>
    <select id="selectWithDptByPrimaryKey" parameterType="java.lang.Integer" resultMap="SelectWithDept">
    select 
    <include refid="withDpt_Column_List" />
    FROM employee_info
    LEFT JOIN dapartment_info ON did=dpid
    where eid = #{eid,jdbcType=INTEGER}
    </select>
    <!-- 原生查询 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from employee_info
    where eid = #{eid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from employee_info
    where eid = #{eid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.Enity.EmployeeInfoExample">
    delete from employee_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.Enity.EmployeeInfo">
    insert into employee_info (eid, ename, eage, 
      did)
    values (#{eid,jdbcType=INTEGER}, #{ename,jdbcType=VARCHAR}, #{eage,jdbcType=INTEGER}, 
      #{did,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.Enity.EmployeeInfo">
    insert into employee_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        eid,
      </if>
      <if test="ename != null">
        ename,
      </if>
      <if test="eage != null">
        eage,
      </if>
      <if test="did != null">
        did,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="eid != null">
        #{eid,jdbcType=INTEGER},
      </if>
      <if test="ename != null">
        #{ename,jdbcType=VARCHAR},
      </if>
      <if test="eage != null">
        #{eage,jdbcType=INTEGER},
      </if>
      <if test="did != null">
        #{did,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.Enity.EmployeeInfoExample" resultType="java.lang.Long">
    select count(*) from employee_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update employee_info
    <set>
      <if test="record.eid != null">
        eid = #{record.eid,jdbcType=INTEGER},
      </if>
      <if test="record.ename != null">
        ename = #{record.ename,jdbcType=VARCHAR},
      </if>
      <if test="record.eage != null">
        eage = #{record.eage,jdbcType=INTEGER},
      </if>
      <if test="record.did != null">
        did = #{record.did,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update employee_info
    set eid = #{record.eid,jdbcType=INTEGER},
      ename = #{record.ename,jdbcType=VARCHAR},
      eage = #{record.eage,jdbcType=INTEGER},
      did = #{record.did,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.Enity.EmployeeInfo">
    update employee_info
    <set>
      <if test="ename != null">
        ename = #{ename,jdbcType=VARCHAR},
      </if>
      <if test="eage != null">
        eage = #{eage,jdbcType=INTEGER},
      </if>
      <if test="did != null">
        did = #{did,jdbcType=INTEGER},
      </if>
    </set>
    where eid = #{eid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.Enity.EmployeeInfo">
    update employee_info
    set ename = #{ename,jdbcType=VARCHAR},
      eage = #{eage,jdbcType=INTEGER},
      did = #{did,jdbcType=INTEGER}
    where eid = #{eid,jdbcType=INTEGER}
  </update>
</mapper>